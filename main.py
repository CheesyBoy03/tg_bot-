from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

from config import TOKEN

from menus.main_menu import main_menu
from menus.back_btn import menu_with_back_button

from menus.inline_menu.inline_menu_status import inline_menu_check_status


bot = Bot(TOKEN)
dp = Dispatcher(bot)


# TODO: –°–¥–µ–ª–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è [–Ω–µ –¥–æ–¥–µ–ª–∞–Ω–æ]
@dp.message_handler(content_types=["new_chat_members"])
async def check_messages(message: types.Message):
    print(message)
    user_name = message.new_chat_members[0].first_name
    await bot.send_message(message.chat.id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!")


@dp.message_handler(lambda message: message.text != '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏')
async def verification_of_subscription(message: types.Message):
    link = '@TestProjectEva'
    admins = await bot.get_chat_administrators(link)
    is_admin = False

    for admin in admins:
        if message.from_user.id == admin.user.id:
            is_admin = True

    if is_admin:
        await bot.send_message(message.chat.id, '–í–∞—è —Å–º–∞—Ä–∏ –∫–∞–∫–æ–π –∞–¥–º–∏–Ω', reply_markup=main_menu)


# TODO: —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ (–±—Ä–∞—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö) [–Ω–µ –¥–æ–¥–µ–ª–∞–Ω–æ]
@dp.message_handler(lambda message: message.text == '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏')
async def subscription_verification_status(message: types.Message):
    await bot.send_message(message.chat.id, f"üîπ {message.text} üîπ", reply_markup=menu_with_back_button)
    await bot.send_message(message.chat.id, '–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏: –í–∫–ª—é—á–µ–Ω', reply_markup=inline_menu_check_status)


# TODO: –°–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ [–Ω–µ –¥–æ–¥–µ–ª–∞–Ω–æ]
@dp.callback_query_handler(lambda call: call.data == 'off')
async def view_call(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)


# TODO: –°–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ [–Ω–µ –¥–æ–¥–µ–ª–∞–Ω–æ]
@dp.callback_query_handler(lambda call: call.data == 'on')
async def view_call(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)


if __name__ == '__main__':
    executor.start_polling(dp)
